#ifndef XF_EVENT_H
#define XF_EVENT_H

#include <cstdint>
#include "config/xf-config.h"

namespace interface {
    class XFBehavior;
}

/** @ingroup xf_core
 *  @{
 */

/**
 * @brief Base class for all types of events.
 *
 * Requirements:
 * - Needs to hold a property which allows to distinguish between different
 *   types of events (#eventType_).
 * - Use an enumeration to define the type for the event type property (#XFEventType).
 * - The event type property needs to be set at initialization time and cannot be
 *   changed afterwards.
 *
 * Note:
 * - The TimeoutHandle type is port specific and needs to be defined in the 'xf-port-config.h' file.
 */
class XFEvent
#if defined(XF_PORT_QT)
        : public QObject
#endif // XF_PORT_QT
{
#if defined(XF_PORT_QT)
    Q_OBJECT
    friend class XFTimeoutManager;  // Needed by Qt port
#endif // XF_PORT_QT

    friend class XFBehavior;        // To access timer methods
    friend class XFDispatcher;      // To access timer methods

public:
    /**
     * Defines the types of events
     */
    typedef enum
    {
        Unknown			  = 0,		///< Unknown state (not initialized).
        Initial			  = 1,		///< Initial pseudostate.
        DefaultTransition = 2,		///< Event generated by the state machine to define a default transition.
        Event			  = 3,		///< Standard event.
    } XFEventType;

    typedef int32_t EventId;        ///< Type used to identify event in behavior (state machine).

    typedef XFEvent * XFEventHandle;    ///< Handle to XFEvent. Used to identify a delayed event.

public:
    /**
     * \brief Standard constructor.
     * \param eventType The event type to be represented by the event.
     * \param id State-machine specific id to identify event.
     */
    XFEvent(XFEventType eventType, EventId id = 0) : eventType_(eventType), id_(id), pBehavior_(nullptr), timeoutInMilliseconds(0), timeoutHandle(0) {}
    virtual ~XFEvent();

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return eventType_; }

    /** \brief Returns pointer to behavioral class.
     *
     * Returns a pointer to the behavioral class processing the event (see #pBehavior_).
     */
    inline interface::XFBehavior * getBehavior() const { return pBehavior_; }

    /** \brief Sets pointer to behavioral class (see #pBehavior_).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFBehavior * pBehavior) { pBehavior_ = pBehavior; }

    inline EventId getId() const { return id_; }		        ///< Returns #id_ identifying the event in the behaviors context.

    int32_t getDelay() const { return timeoutInMilliseconds; }  ///< Returns actual delay in milliseconds (used by the internal timer).

    virtual bool deleteAfterConsume() const { return true; }	///< Tells the dispatcher if the event must be deleted or not.

protected:
    TimeoutHandle startTimer(int32_t timeoutInMilliseconds);    ///< Start timer with provided information. Returns handle to created timer.
    void stopTimer();                                           ///< Stops/cancels timer.
    void purgeTimer();                                          ///< Deletes internal timer structure.

#if defined(XF_PORT_ZEPHYR)
protected:
    static void onTimerTimeout(void * timerContext);            ///< Callback method to be called when timer timeouts.
    static void onTimerCanceled(void * timerContext);           ///< Callback method to be called when running timer gets canceled.
#endif // XF_PORT_ZEPHYR

#if defined(XF_PORT_QT)
protected slots:
    void onTimerTimeout();                                      ///< Callback method to be called when timer timeouts.
#endif // XF_PORT_QT

protected:
    const XFEventType eventType_;           ///< Holds the type of the event.
    EventId id_;                            ///< Event id to identify event in state-machine.

    interface::XFBehavior * pBehavior_;     ///< Pointer to behavioral class (ex. state-machine) processing the event.

    int32_t timeoutInMilliseconds;          ///< Value to delay the event.
    TimeoutHandle timeoutHandle;            ///< Handle to the timeout.
};

/** @} */ // end of xf_core group
#endif // XF_EVENT_H
